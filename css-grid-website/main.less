.prefix(@prop, @val) {
	-webkit-@{prop}: @val;
	-moz-@{prop}: @val;
	@{prop}: @val;
}

body {
	margin: 0;
}

header {
	text-align: center;
	font-family: sans-serif;
	padding: 0 15px;
	p {
		text-align: justify;

		@media screen and (min-width: 1024px) {
			.prefix(column-count, 2);	
		}
	}
}

.grid {
	@col-width: 340px;
	display: block;
	text-align: center;
	.prefix(column-width, @col-width);
	.prefix(column-gap, 15px);

	&:hover .grid-item:not(:hover) {
		opacity: 0.5;
	}

	.grid-item {
		display: inline-block;
		margin-bottom: 10px;
		background-image: url("https://source.unsplash.com/category/nature"); //returns random nature images
		width: @col-width;
		transition: opacity linear 0.3;
	}

	// generate rules for .grid-item in LESS loop
	// evaluate JS expression to get random element heights
	@iterations: 4;
	.mixin-loop (@i) when (@i > 0) {
		.grid-item:nth-child(5n + @{i}) {
			@var: `Math.floor(200 + Math.random() * 400)`;
			height: unit(@var, px);
		}
		.mixin-loop(@i - 1);
	}
	.mixin-loop(@iterations);
}